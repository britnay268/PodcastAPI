// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PodcastAPI.Data;

#nullable disable

namespace PodcastAPI.Migrations
{
    [DbContext(typeof(PodcastAPIDbContext))]
    partial class PodcastAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PodcastAPI.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PodcastId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("Episodes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the mysterious disappearance of five children from a West Virginia home on Christmas Eve in 1945.",
                            Duration = 2540,
                            ImageUrl = "",
                            PodcastId = 1,
                            Title = "The Vanishing of the Sodder Children"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Delve into the infamous unsolved cases of the Zodiac Killer and the clues that continue to baffle investigators.",
                            Duration = 2642,
                            ImageUrl = "",
                            PodcastId = 1,
                            Title = "The Zodiac Killer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comedians share their most cringe-worthy moments and the life lessons learned from them.",
                            Duration = 1830,
                            ImageUrl = "",
                            PodcastId = 2,
                            Title = "Falling Flat: My Most Embarrassing Moments"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A hilarious look at parenting mishaps and the unexpected wisdom that comes from raising kids.",
                            Duration = 1756,
                            ImageUrl = "",
                            PodcastId = 2,
                            Title = "Parenting Fails: When Kids Outsmart You"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hear firsthand accounts from travelers navigating cultures, cuisines, and breathtaking landscapes.",
                            Duration = 3573,
                            ImageUrl = "",
                            PodcastId = 3,
                            Title = "Backpacking Through Southeast Asia"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover the joys of immersive travel experiences that prioritize connection over itinerary.",
                            Duration = 3685,
                            ImageUrl = "",
                            PodcastId = 3,
                            Title = "The Art of Slow Travel"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Investigate how first impressions are formed and their lasting impact on our relationships.",
                            Duration = 2193,
                            ImageUrl = "",
                            PodcastId = 4,
                            Title = "The Psychology of First Impressions"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the psychological factors that lead to procrastination and tips for overcoming it.",
                            Duration = 2045,
                            ImageUrl = "",
                            PodcastId = 4,
                            Title = "Why We Procrastinate: The Science Behind It"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brit travels to Chicago",
                            Duration = 1034,
                            ImageUrl = "",
                            PodcastId = 5,
                            Title = "Day in the Life of Brit Pt. 1"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brit leaves Chicago",
                            Duration = 263,
                            ImageUrl = "",
                            PodcastId = 5,
                            Title = "Day in the Life of Brit Pt. 2"
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.FavoriteEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteEpisodes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EpisodeId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EpisodeId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EpisodeId = 8,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            EpisodeId = 7,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            EpisodeId = 10,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            EpisodeId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            EpisodeId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            EpisodeId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            EpisodeId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            EpisodeId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            EpisodeId = 9,
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            EpisodeId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            EpisodeId = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.FavoritePodcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PodcastId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritePodcasts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PodcastId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PodcastId = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            PodcastId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            PodcastId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            PodcastId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            PodcastId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            PodcastId = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "True Crime"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "News and Politics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Business and Finance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Health and Wellness"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Storytelling/Documentary"
                        },
                        new
                        {
                            Id = 8,
                            Name = "History"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Personal Development"
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("Podcasts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dive into intriguing unsolved mysteries and explore the stories behind them.",
                            GenreId = 7,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcE9K4DhKIoRe3InWlLAZ_kn1OtDtFXOjvPQ&s",
                            Title = "Mystery Unraveled",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2010, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comedic take on life’s lessons, featuring funny anecdotes and insightful interviews.",
                            GenreId = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZRw85bJb4AyflJ3CYLIEK_Wmv3Aj0Fe0Ubw&s",
                            Title = "Laughs and Lessons",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Journey around the globe with travelers sharing their adventures and travel tips.",
                            GenreId = 7,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ9991LNdmmk7rx9mQl7TeZuEHRXADOvD73A7V_TqljXbajmcMWn6cb0k1tBcSnTbEXAe0&usqp=CAU",
                            Title = "Wanderlust Chronicles",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the fascinating intersection of science and human behavior, uncovering what makes us tick.",
                            GenreId = 9,
                            ImageUrl = "https://plus.unsplash.com/premium_photo-1664195074951-fe91ec456eed?fm=jpg&q=60&w=3000[…]M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9kY2FzdHxlbnwwfHwwfHx8MA%3D%3D",
                            Title = "The Science of Us",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "She wanted more than one podcast, so she got it.",
                            GenreId = 7,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZRw85bJb4AyflJ3CYLIEK_Wmv3Aj0Fe0Ubw&s",
                            Title = "Brit's World",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.ShowdownResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("LosingPodcastId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WinningPodcastId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LosingPodcastId");

                    b.HasIndex("WinningPodcastId");

                    b.ToTable("ShowdownResults", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 7,
                            LosingPodcastId = 5,
                            UserId = 1,
                            WinningPodcastId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 7,
                            LosingPodcastId = 3,
                            UserId = 2,
                            WinningPodcastId = 5
                        },
                        new
                        {
                            Id = 3,
                            GenreId = -1,
                            LosingPodcastId = 4,
                            UserId = 3,
                            WinningPodcastId = 5
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 7,
                            LosingPodcastId = 1,
                            UserId = 4,
                            WinningPodcastId = 5
                        },
                        new
                        {
                            Id = 5,
                            GenreId = -1,
                            LosingPodcastId = 3,
                            UserId = 1,
                            WinningPodcastId = 2
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateJoined = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alex",
                            ImageUrl = "",
                            LastName = "Berka",
                            Uid = "gKwUrKOtRCgw7JjrbxJrbf612dt2",
                            Username = "alexberka"
                        },
                        new
                        {
                            Id = 2,
                            DateJoined = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Max",
                            ImageUrl = "",
                            LastName = "Jones",
                            Uid = "5cMGwFoo4VfmsK04V8TXIciut862",
                            Username = "maxjones"
                        },
                        new
                        {
                            Id = 3,
                            DateJoined = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Josh",
                            ImageUrl = "",
                            LastName = "Gochey",
                            Uid = "kTXfa5EXDtUWx6PqVcRMJPBVcGZ2",
                            Username = "joshgochey"
                        },
                        new
                        {
                            Id = 4,
                            DateJoined = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brit",
                            ImageUrl = "",
                            LastName = "Gore",
                            Uid = "qGLQ1gzuAmTsgtAXAh7TT3YlkEE2",
                            Username = "britgore"
                        });
                });

            modelBuilder.Entity("PodcastAPI.Models.Episode", b =>
                {
                    b.HasOne("PodcastAPI.Models.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("PodcastAPI.Models.FavoriteEpisode", b =>
                {
                    b.HasOne("PodcastAPI.Models.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodcastAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodcastAPI.Models.FavoritePodcast", b =>
                {
                    b.HasOne("PodcastAPI.Models.Podcast", null)
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodcastAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodcastAPI.Models.Podcast", b =>
                {
                    b.HasOne("PodcastAPI.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodcastAPI.Models.User", "User")
                        .WithMany("Podcasts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PodcastAPI.Models.ShowdownResult", b =>
                {
                    b.HasOne("PodcastAPI.Models.Podcast", null)
                        .WithMany("LosingShowdowns")
                        .HasForeignKey("LosingPodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodcastAPI.Models.Podcast", null)
                        .WithMany("WinningShowdowns")
                        .HasForeignKey("WinningPodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodcastAPI.Models.Podcast", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("LosingShowdowns");

                    b.Navigation("WinningShowdowns");
                });

            modelBuilder.Entity("PodcastAPI.Models.User", b =>
                {
                    b.Navigation("Podcasts");
                });
#pragma warning restore 612, 618
        }
    }
}
